// SPDX-License-Identifier: MIT\
pragma solidity ^0.8.0;\
\
contract ClawMachine \{\
    address public owner; // owner of the game\
    uint256 public fee; // fee to play the game\
    uint256 public pathLength; // length of the path along which the claw can move\
    uint256 public maxAttempts; // maximum number of attempts allowed\
    bytes32 public targetPositionCommitment; // commitment to the target position\
    uint256 public targetPosition; // actual target position\
    address public winner; // address of the winner\
    uint256 public winnings; // amount won by the winner\
\
    mapping(address => uint256) public attempts; // number of attempts made by each player\
\
    constructor(uint256 _fee, uint256 _pathLength, uint256 _maxAttempts) \{\
        owner = msg.sender;\
        fee = _fee;\
        pathLength = _pathLength;\
        maxAttempts = _maxAttempts;\
    \}\
\
    function play() public payable \{\
        require(msg.value == fee, "Fee must be paid to play the game");\
        require(attempts[msg.sender] < maxAttempts, "Maximum attempts reached");\
\
        attempts[msg.sender]++;\
\
        if (attempts[msg.sender] == 1) \{\
            (targetPosition, targetPositionCommitment) = generateTargetPosition();\
        \}\
\
        uint256 finalPosition = generateFinalPosition();\
\
        if (finalPosition == targetPosition) \{\
            winner = msg.sender;\
            winnings = address(this).balance;\
        \}\
    \}\
\
    function generateTargetPosition() private view returns (uint256, bytes32) \{\
        uint256 targetPosition = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % pathLength;\
        bytes32 commitment = keccak256(abi.encode(targetPosition));\
        return (targetPosition, commitment);\
    \}\
\
    function generateFinalPosition() private view returns (uint256) \{\
        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender))) % pathLength;\
    \}\
\
    function claimWinnings() public \{\
        require(msg.sender == winner, "You are not the winner");\
        require(winnings > 0, "There are no winnings to claim");\
\
        uint256 amount = winnings;\
        winnings = 0;\
        payable(winner).transfer(amount);\
    \}\
\
    function withdraw() public \{\
        require(msg.sender == owner, "You are not the owner");\
\
        uint256 amount = address(this).balance;\
        payable(owner).transfer(amount);\
    \}\
\}\
}
